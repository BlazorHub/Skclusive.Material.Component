@inherits StyleComponentBase

<style data-name="InputAdornment">

    .InputAdornment-Root {
        height: 0.01em;
        display: flex;
        max-height: 2em;
        align-items: center;
    }

    .InputAdornment-Filled.InputAdornment-Position-Start:not(.InputAdornment-HiddenLabel) {
        margin-top: 16px;
    }

    .InputAdornment-Position-Start {
        margin-right: 8px;
    }

    .InputAdornment-Position-End {
        margin-left: 8px;
    }

    .InputAdornment-DisablePointerEvents {
        pointer-events: none;
    }

</style>

<style data-name="InputLabel">

    .InputLabel-Root {
        transform-origin: top left;
    }

    .InputLabel-FormControl {
        top: 0;
        left: 0;
        position: absolute;
        transform: translate(0, 24px) scale(1);
    }

    .InputLabel-Margin-Dense {
        transform: translate(0, 21px) scale(1);
    }

    .InputLabel-Shrink {
        transform: translate(0, 1.5px) scale(0.75);
        transform-origin: top left;
    }

    .InputLabel-Animated {
        transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
    }

</style>

<style data-name="InputBase">

    .InputBase-Root {
        color: var(--theme-palette-text-primary, rgba(0, 0, 0, 0.87));
        cursor: text;
        display: inline-flex;
        position: relative;
        font-size: calc(var(--theme-font-size-rem-factor, 0.0625) * 16rem);
        box-sizing: border-box;
        align-items: center;
        font-family: var(--theme-typography-font-family, "Roboto", "Helvetica", "Arial", sans-serif);
        line-height: 1.1875em;
    }

    .InputBase-Root.InputBase-disabled {
        color: var(--theme-palette-text-disabled, rgba(0, 0, 0, 0.38));
        cursor: default;
    }

    .InputBase-Multiline {
        padding: 6px 0 7px;
    }

    .InputBase-Multiline.InputBase-Margin-Dense {
        padding-top: 3px;
    }

    .InputBase-FullWidth {
        width: 100%;
    }

    .InputBase-Input {
        font: inherit;
        color: currentColor;
        width: 100%;
        border: 0;
        height: 1.1875em;
        margin: 0;
        display: block;
        padding: 6px 0 7px;
        min-width: 0;
        background: none;
        box-sizing: content-box;
        animation-name: InputBase-keyframes-auto-fill-cancel;
        -webkit-tap-highlight-color: transparent;
    }

    .InputBase-Input::-webkit-input-placeholder {
        color: currentColor;
        opacity: 0.42;
        transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    }

    .InputBase-Input::-moz-placeholder {
        color: currentColor;
        opacity: 0.42;
        transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    }

    .InputBase-Input:-ms-input-placeholder {
        color: currentColor;
        opacity: 0.42;
        transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    }

    .InputBase-Input::-ms-input-placeholder {
        color: currentColor;
        opacity: 0.42;
        transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    }

    .InputBase-Input:focus {
        outline: 0;
    }

    .InputBase-Input:invalid {
        box-shadow: none;
    }

    .InputBase-Input::-webkit-search-decoration {
        -webkit-appearance: none;
    }

    .InputBase-Input.InputBase-disabled {
        opacity: 1;
    }

    .InputBase-Input:-webkit-autofill {
        animation-name: InputBase-keyframes-auto-fill;
        animation-duration: 5000s;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input::-webkit-input-placeholder {
        opacity: 0 !important;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input::-moz-placeholder {
        opacity: 0 !important;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input:-ms-input-placeholder {
        opacity: 0 !important;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input::-ms-input-placeholder {
        opacity: 0 !important;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input:focus::-webkit-input-placeholder {
        opacity: 0.42;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input:focus::-moz-placeholder {
        opacity: 0.42;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input:focus:-ms-input-placeholder {
        opacity: 0.42;
    }

    label[data-shrink="false"]
    + .InputBase-FormControl
    .InputBase-Input:focus::-ms-input-placeholder {
        opacity: 0.42;
    }

    .InputBase-Input-Margin-Dense {
        padding-top: 3px;
    }

    .InputBase-Input-Select {
        padding-right: 24px;
    }

    .InputBase-Input-Multiline {
        height: auto;
        resize: none;
        padding: 0;
    }

    .InputBase-Input-TypeSearch {
        -moz-appearance: textfield;
        -webkit-appearance: textfield;
    }

</style>

<style data-name="Input">

    .Input-Root {
        position: relative;
    }

    label + .Input-FormControl {
        margin-top: 16px;
    }

    .Input-Underline:after {
        left: 0;
        right: 0;
        bottom: 0;
        content: "";
        position: absolute;
        transform: scaleX(0);
        transition: transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
        border-bottom: 2px solid
            var(--theme-palette-primary-current, rgb(17, 82, 147));
        pointer-events: none;
    }

    .Input-underline.Input-Focused:after {
        transform: scaleX(1);
    }

    .Input-Underline.Input-Error:after {
        transform: scaleX(1);
        border-bottom-color: var(--theme-palette-error-main, #f44336);
    }

    .Input-Underline:before {
        left: 0;
        right: 0;
        bottom: 0;
        content: "\00a0";
        position: absolute;
        transition: border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
        border-bottom: 1px solid
            var(--theme-palette-border-bottom, rgba(0, 0, 0, 0.42));
        pointer-events: none;
    }

    .Input-Underline:hover:not(.Input-Disabled):before {
        border-bottom: 2px solid
            var(--theme-palette-text-primary, rgba(0, 0, 0, 0.87));
    }

    .Input-Underline.Input-Disabled:before {
        border-bottom-style: dotted;
    }

    @media (hover: none) {
        .Input-Underline:hover:not(.Input-Disabled):before {
            border-bottom: 1px solid
            var(--theme-palette-border-bottom, rgba(0, 0, 0, 0.42));
        }
    }

</style>